<div class="content-wrapper">
<div class="card-grid list">
<% 
// --- Helpers: normalize and parse dates safely ---
const today = new Date();
today.setHours(0, 0, 0, 0); // midnight for comparisons

// Robust parser for "19 Sep, 2025" (and similar)
const parseEventDate = (dateStr) => {
if (!dateStr) return null;
const cleaned = String(dateStr).replace(',', '').trim();
const parts = cleaned.split(/\s+/);

// Try the expected pattern "19 Sep 2025" or "19 Sep, 2025"
if (parts.length >= 3) {
const day = parseInt(parts[0], 10);
const monthStr = parts[1].toLowerCase().slice(0, 3);
const year = parseInt(parts[2], 10);
const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];
const monthIndex = months.indexOf(monthStr);
if (!isNaN(day) && monthIndex !== -1 && !isNaN(year)) {
return new Date(year, monthIndex, day);
}
}

// Fallback to Date constructor; return null if invalid
const fallback = new Date(dateStr);
return isNaN(fallback.getTime()) ? null : fallback;
};

const normalizeToMidnight = (d) => {
if (!d) return null;
const copy = new Date(d.getTime());
copy.setHours(0, 0, 0, 0);
return copy;
};

// --- Filtering logic ---
const futureItems = (items || []).filter(item => {
// item.event.date is guaranteed to exist per your statement
const startDate = parseEventDate(item.event.date);
if (!startDate) return false; // skip malformed start date

const endDate = item.event.end_date ? parseEventDate(item.event.end_date) : null;

// Use endDate for comparison when it exists and is valid; otherwise use startDate
const comparisonDate = endDate ? endDate : startDate;

const cmp = normalizeToMidnight(comparisonDate);
if (!cmp) return false;

return cmp >= today;
});

// (Optional) If you want the soonest events first, uncomment the next line:
// futureItems.sort((a,b) => parseEventDate(a.date) - parseEventDate(b.date));

for (const item of futureItems) {
%>
<div class="card" <%= metadataAttrs(item) %>>
<a href="<%- item.path %>" class="card-link">
<div class="card-content-wrapper">

<div class="event-category listing-categories">
<%- (item.event.categories?.[0] || 'EVENT').toUpperCase() %>
</div>

<div class="card-metadata">
<div class="event-date listing-date">
<% 
// Use the same parser for display to keep things consistent
const startDate = parseEventDate(item.event.date);
const startDay = startDate ? startDate.getDate() : '';
const startMonth = startDate ? startDate.toLocaleString('en-GB', { month: 'short' }) : '';
const startYear = startDate ? startDate.getFullYear() : '';

let dateDisplay = '';

if (item.event.end_date) {
const endDate = parseEventDate(item.event.end_date);
if (endDate) {
const endDay = endDate.getDate();
const endMonth = endDate.toLocaleString('en-GB', { month: 'short' });
const endYear = endDate.getFullYear();

if (startMonth === endMonth && startYear === endYear) {
if (startDay === endDay) {
dateDisplay = `${startDay} ${startMonth}, ${startYear}`;
} else {
dateDisplay = `${startDay}-${endDay} ${startMonth}, ${startYear}`;
}
} else if (startYear === endYear) {
dateDisplay = `${startDay} ${startMonth}-${endDay} ${endMonth}, ${startYear}`;
} else {
dateDisplay = `${startDay} ${startMonth}, ${startYear}-${endDay} ${endMonth}, ${endYear}`;
}
} else {
// end_date provided but invalid -> show start date only
dateDisplay = `${startDay} ${startMonth}, ${startYear}`;
}
} else {
dateDisplay = `${startDay} ${startMonth}, ${startYear}`;
}
%>
<%= dateDisplay %>
</div>

<div class="event-time-loc">
<div class="event-time listing-time">
<i class="bi bi-clock"></i>
<%- item.event.time || '' %>
</div>
<div class="divider"></div>
<div class="event-location listing-location">
<i class="bi bi-geo-alt-fill"></i>
<%- item.event.location.name || '' %>
</div>

<div class="divider"></div>
<div class="event-form listing-form">
<%
let formIcon = '';
if (item.event.format.type?.toLowerCase().includes('in-person')) {
formIcon = '<i class="bi bi-person"></i>';
} else if (item.event.format.type?.toLowerCase().includes('hybrid')) {
formIcon = '<i class="bi bi-person-video3"></i>';
} else if (item.event.format.type?.toLowerCase().includes('online')) {
formIcon = '<i class="bi bi-laptop"></i>';
}
%>
<%= formIcon %> <%- item.event.format.type || '' %>
</div>

<% if (item.event.language['primary-code']) { %>
<div class="divider"></div>
<div class="event-language listing-language">
<i class="bi bi-translate"></i>
<%- (typeof item.event.language['primary-code'] === 'string' ? item.event.language['primary-code'] : '').toUpperCase() %>
</div>
<% } %>
</div>
</div>

<div class="title listing-title"><%- item.event.title %></div>
<div class="separator"></div>

<p class="description listing-description"><%- item.event.description %></p>

<div class="event-footer">
<div class="event-host-info-group">
<div class="event-host-info">
Hosted by: <%- item.event.host %>
</div>
<% if (item.contact && item.contact.name && item.contact.email) { %>
<div class="divider"></div>
<div class="event-contact-info">
<i class="bi bi-envelope"></i>
<a href="mailto:<%- item.contact.email %>?subject=Regarding <%- item.event.title %>">
<%- item.contact.name %>
</a>
</div>
<% } %>
</div>

<div class="read-more-button">
<i class="bi bi-arrow-right"></i> 
</div>
</div>

</div>
</a>
</div>
<% } %>
</div>
</div>




